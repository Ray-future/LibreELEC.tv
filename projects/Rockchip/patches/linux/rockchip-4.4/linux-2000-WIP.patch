diff --git a/drivers/video/rockchip/vcodec/vcodec_service.c b/drivers/video/rockchip/vcodec/vcodec_service.c
index 4b2eb9093d35..cd6d3c65bae4 100644
--- a/drivers/video/rockchip/vcodec/vcodec_service.c
+++ b/drivers/video/rockchip/vcodec/vcodec_service.c
@@ -666,6 +666,8 @@ static void rkvdec_dvfs_set_clk(struct vpu_service_info *pservice,
 {
 	struct devfreq *devfreq = pservice->devfreq;
 
+	dev_info(pservice->dev, "rkvdec_dvfs_set_clk: vcodec_rate=%u core_rate=%u cabac_rate=%u\n", vcodec_rate, core_rate, cabac_rate);
+
 	mutex_lock(&devfreq->lock);
 
 	pservice->vcodec_rate = vcodec_rate;
@@ -735,6 +737,8 @@ static void vpu_reset(struct vpu_subdev_data *data)
 {
 	struct vpu_service_info *pservice = data->pservice;
 
+	dev_info(pservice->dev, "vpu_reset\n");
+
 	_vpu_reset(data);
 	if (data->mmu_dev && test_bit(MMU_ACTIVATED, &data->state)) {
 		clear_bit(MMU_ACTIVATED, &data->state);
@@ -814,7 +818,7 @@ static void vpu_service_power_off(struct vpu_service_info *pservice)
 		pr_alert("alert: delay 50 ms for running task\n");
 	}
 
-	dev_dbg(pservice->dev, "power off...\n");
+	dev_info(pservice->dev, "power off...\n");
 
 	udelay(5);
 
@@ -828,9 +832,10 @@ static void vpu_service_power_off(struct vpu_service_info *pservice)
 	if (pservice->hw_ops->power_off)
 		pservice->hw_ops->power_off(pservice);
 
+	atomic_add(1, &pservice->reset_request);
 	atomic_add(1, &pservice->power_off_cnt);
 	wake_unlock(&pservice->wake_lock);
-	dev_dbg(pservice->dev, "power off done\n");
+	dev_info(pservice->dev, "power off done\n");
 }
 
 static inline void vpu_queue_power_off_work(struct vpu_service_info *pservice)
@@ -872,7 +877,7 @@ static void vpu_service_power_on(struct vpu_subdev_data *data,
 	if (!ret)
 		return;
 
-	dev_dbg(pservice->dev, "power on\n");
+	dev_info(pservice->dev, "power on\n");
 
 	if (pservice->hw_ops->power_on)
 		pservice->hw_ops->power_on(pservice);
@@ -1587,6 +1592,8 @@ static void try_set_reg(struct vpu_subdev_data *data)
 		mutex_unlock(&pservice->reset_lock);
 	}
 
+	dev_info(pservice->dev, "try_set_reg: reset_request=%d list_empty=%d\n", reset_request, list_empty(&pservice->waiting));
+
 	if (!list_empty(&pservice->waiting)) {
 		struct vpu_reg *reg_codec = pservice->reg_codec;
 		struct vpu_reg *reg_pproc = pservice->reg_pproc;
@@ -1617,9 +1624,6 @@ static void try_set_reg(struct vpu_subdev_data *data)
 			reg_from_wait_to_run(pservice, reg);
 			reg_copy_to_hw(reg->data, reg);
 		}
-	} else {
-		if (pservice->hw_ops->reduce_freq)
-			pservice->hw_ops->reduce_freq(pservice);
 	}
 
 	mutex_unlock(&pservice->shutdown_lock);
@@ -1633,9 +1637,11 @@ static void vpu_set_register_work(struct work_struct *work_s)
 						    set_work);
 	struct vpu_service_info *pservice = data->pservice;
 
+	dev_info(pservice->dev, "vpu_set_register_work: enter\n");
 	mutex_lock(&pservice->lock);
 	try_set_reg(data);
 	mutex_unlock(&pservice->lock);
+	dev_info(pservice->dev, "vpu_set_register_work: leave\n");
 }
 
 static int return_reg(struct vpu_subdev_data *data,
@@ -1754,6 +1760,7 @@ static long vpu_service_ioctl(struct file *filp, unsigned int cmd,
 		if (NULL == reg) {
 			return -EFAULT;
 		} else {
+			dev_info(pservice->dev, "VPU_IOC_SET_REG: queue_work\n");
 			queue_work(pservice->set_workq, &data->set_work);
 		}
 	} break;
@@ -1775,6 +1782,7 @@ static long vpu_service_ioctl(struct file *filp, unsigned int cmd,
 			break;
 		}
 
+		dev_info(pservice->dev, "VPU_IOC_GET_REG: before copy_from_user\n");
 		if (copy_from_user(&req, (void __user *)arg,
 				   sizeof(struct vpu_request))) {
 			vpu_err("error: get reg copy_from_user failed\n");
@@ -1784,6 +1792,7 @@ static long vpu_service_ioctl(struct file *filp, unsigned int cmd,
 		ret = wait_event_timeout(session->wait,
 					 !list_empty(&session->done),
 					 VPU_TIMEOUT_DELAY);
+		dev_info(pservice->dev, "VPU_IOC_GET_REG: after wait_event_timeout\n");
 
 		while (atomic_read(&pservice->reset_request))
 			msleep(10);
@@ -1805,6 +1814,7 @@ static long vpu_service_ioctl(struct file *filp, unsigned int cmd,
 			}
 		}
 
+		dev_info(pservice->dev, "VPU_IOC_GET_REG: ret=%d\n", ret);
 		if (ret < 0) {
 			int task_running = atomic_read(&session->task_running);
 
@@ -2011,7 +2021,7 @@ static int vpu_service_open(struct inode *inode, struct file *filp)
 	filp->private_data = (void *)session;
 	mutex_unlock(&pservice->lock);
 
-	dev_dbg(pservice->dev, "dev opened\n");
+	dev_info(pservice->dev, "dev opened\n");
 	vpu_debug_leave();
 	return nonseekable_open(inode, filp);
 }
@@ -2130,6 +2140,8 @@ static void vcodec_power_on_rk322x(struct vpu_service_info *pservice)
 {
 	unsigned long rate = 300 * MHZ;
 
+	dev_info(pservice->dev, "vcodec_power_on_rk322x\n");
+
 	vcodec_power_on_default(pservice);
 
 	if (pservice->dev_id == VCODEC_DEVICE_ID_RKVDEC)
@@ -2147,6 +2159,8 @@ static void vcodec_power_on_rk3328(struct vpu_service_info *pservice)
 {
 	struct devfreq_dev_status *stat;
 
+	dev_info(pservice->dev, "vcodec_power_on_rk3328\n");
+
 	if (pservice->devfreq) {
 		stat = &pservice->devfreq->last_status;
 		stat->busy_time = 1;
@@ -2166,6 +2180,8 @@ static void vcodec_power_on_rk3328(struct vpu_service_info *pservice)
 
 static void vcodec_power_off_default(struct vpu_service_info *pservice)
 {
+	dev_info(pservice->dev, "vcodec_power_off_default\n");
+
 	if (pservice->pd_video)
 		clk_disable_unprepare(pservice->pd_video);
 	if (pservice->hclk_vcodec)
@@ -2181,6 +2197,8 @@ static void vcodec_power_off_default(struct vpu_service_info *pservice)
 
 static void vcodec_power_off_rk322x(struct vpu_service_info *pservice)
 {
+	dev_info(pservice->dev, "vcodec_power_off_rk322x\n");
+
 	vcodec_power_off_default(pservice);
 
 	if (pservice->aclk_vcodec)
@@ -2195,6 +2213,8 @@ static void vcodec_power_off_rk3328(struct vpu_service_info *pservice)
 {
 	struct devfreq_dev_status *stat;
 
+	dev_info(pservice->dev, "vcodec_power_off_rk3328\n");
+
 	vcodec_power_off_default(pservice);
 
 	if (pservice->devfreq) {
@@ -2244,6 +2264,8 @@ static void vcodec_set_freq_default(struct vpu_service_info *pservice,
 {
 	enum VPU_FREQ curr = atomic_read(&pservice->freq_status);
 
+	dev_info(pservice->dev, "vcodec_set_freq_default: curr=%d reg->freq=%d\n", curr, reg->freq);
+
 	if (curr == reg->freq)
 		return;
 
@@ -2290,6 +2312,8 @@ static void rkvdec_set_clk(struct vpu_service_info *pservice,
 	static unsigned long cabac_old_rate = RK3328_CABAC_RATE_ON;
 	static unsigned int div;
 
+	dev_info(pservice->dev, "rkvdec_set_clk: vcodec_rate=%u core_rate=%u cabac_rate=%u event=%u\n", vcodec_rate, core_rate, cabac_rate, event);
+
 	mutex_lock(&pservice->set_clk_lock);
 
 	switch (event) {
@@ -2342,9 +2366,12 @@ static void vcodec_set_freq_rk3328(struct vpu_service_info *pservice,
 {
 	enum VPU_FREQ curr = atomic_read(&pservice->freq_status);
 
+	dev_info(pservice->dev, "vcodec_set_freq_rk3328: curr=%d reg->freq=%d\n", curr, reg->freq);
+
 	if (curr == reg->freq)
 		return;
 
+	atomic_set(&pservice->freq_status, reg->freq);
 	if (pservice->dev_id == VCODEC_DEVICE_ID_RKVDEC) {
 		if (reg->reg[1] & 0x00800000) {
 			if (rkv_dec_get_fmt(reg->reg) == FMT_H264D)
@@ -2369,6 +2396,8 @@ static void vcodec_set_freq_rk322x(struct vpu_service_info *pservice,
 {
 	enum VPU_FREQ curr = atomic_read(&pservice->freq_status);
 
+	dev_info(pservice->dev, "vcodec_set_freq_rk322x: curr=%d reg->freq=%d\n", curr, reg->freq);
+
 	if (curr == reg->freq)
 		return;
 
@@ -2377,6 +2406,7 @@ static void vcodec_set_freq_rk322x(struct vpu_service_info *pservice,
 	 * rk322x rkvdec has more clocks to set
 	 * vpu/vpu2 still only need to set aclk
 	 */
+	atomic_set(&pservice->freq_status, reg->freq);
 	if (pservice->dev_id == VCODEC_DEVICE_ID_RKVDEC) {
 		clk_set_rate(pservice->clk_core,  300 * MHZ);
 		clk_set_rate(pservice->clk_cabac, 300 * MHZ);
@@ -2529,6 +2559,8 @@ static void vcodec_reduce_freq_rk322x(struct vpu_service_info *pservice)
 
 static void vcodec_reduce_freq_rk3328(struct vpu_service_info *pservice)
 {
+	dev_info(pservice->dev, "vcodec_reduce_freq_rk3328\n");
+
 	if (list_empty(&pservice->running))
 		rkvdec_set_clk(pservice, 100 * MHZ, 100 * MHZ, 100 * MHZ,
 			       EVENT_ADJUST);
@@ -3028,7 +3060,7 @@ static void vcodec_init_drvdata(struct vpu_service_info *pservice)
 	atomic_set(&pservice->enabled,       0);
 	atomic_set(&pservice->power_on_cnt,  0);
 	atomic_set(&pservice->power_off_cnt, 0);
-	atomic_set(&pservice->reset_request, 0);
+	atomic_set(&pservice->reset_request, 1);
 
 	INIT_DELAYED_WORK(&pservice->power_off_work, vpu_power_off_work);
 	pservice->last.tv64 = 0;
@@ -3100,7 +3132,7 @@ static int devfreq_vcodec_target(struct device *dev, unsigned long *freq,
 		}
 	}
 
-	dev_dbg(dev, "%lu-->%lu\n", old_clk_rate, target_rate);
+	dev_info(dev, "%lu-->%lu\n", old_clk_rate, target_rate);
 	rkvdec_set_clk(pservice, vcodec_rate, core_rate, cabac_rate, clk_event);
 
 	stat->current_frequency = target_rate;
@@ -3751,6 +3783,7 @@ static irqreturn_t vdpu_isr(int irq, void *dev_id)
 			reg_from_run_to_done(data, pservice->reg_pproc);
 	}
 
+	dev_info(pservice->dev, "vdpu_isr: queue_work\n");
 	queue_work(pservice->set_workq, &data->set_work);
 	mutex_unlock(&pservice->lock);
 	return IRQ_HANDLED;
@@ -3809,6 +3842,7 @@ static irqreturn_t vepu_isr(int irq, void *dev_id)
 		else
 			reg_from_run_to_done(data, pservice->reg_codec);
 	}
+	dev_info(pservice->dev, "vepu_isr: queue_work\n");
 	queue_work(pservice->set_workq, &data->set_work);
 	mutex_unlock(&pservice->lock);
 
